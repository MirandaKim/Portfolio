/****************************************************/
/*                                                 */
/*   CSS Mixins (_mixins.css)                     */
/*                                               */
/************************************************/
/*

  - Library of css mixins with may be used by the css
  - These mixins are handled by the PostCSS plugin postcss-mixins (see ~/gulp/tasks/styles.task.js)
  - Mixin use example:
      .center-vertically {
        @mixin centerVert;
      }
  - Mixin use examples w/ content
      ul {
        @mixin atMedium {
          width: 50%;
        }
      }
      @mixin atTinyOnly {
        .hidden-on-tiny {
          display: hidden;
        }
      }


  *************
  * Contents: *
  *************

  # Media Queries
    > Landscape
    > Portrait
    > Tiny Screen
    > Small Screen
    > Medium Screen
    > Large Screen
    > XL Screen
    > Squished Screen
    > Crushed Screen
    > Pancake Screen

  # Clear Fix
  # Text Styles
  # List Styles
  # Wrapper Styles

*/

/**************************************/
/*   # Media Queries                 */
/************************************/

/******************
*   > Landscape   *
******************/

@define-mixin forLandscape {
  @media only screen and (orientation: landscape){
    @mixin-content;
  }
}

/*****************
*   > Portrait   *
*****************/

@define-mixin forPortrait {
  @media only screen and (orientation: portrait){
    @mixin-content;
  }
}


/*********************
*   > Tiny Screen   *
*********************/
/* Extra small devices (phones, 600px and down) */
@define-mixin forTiny {
  @media only screen and (max-width: $screen_tiny) {
    @mixin-content;
  }
}


/*********************
*   > Small Screen   *
*********************/
/* Small devices (portrait tablets and large phones, 600px and up) */
@define-mixin atSmall {
  @media only screen and (min-width: $screen_small) {
    @mixin-content;
  }
}

/**********************
*   > Medium Screen   *
**********************/
/* Medium devices (landscape tablets, 768px and up) */
@define-mixin atMedium {
  @media only screen and (min-width: $screen_medium) {
    @mixin-content;
  }
}

/*********************
*   > Large Screen   *
*********************/
/* Large devices (laptops/desktops, 992px and up) */
@define-mixin atLarge {
  @media only screen and (min-width: $screen_large) {
    @mixin-content;
  }
}

/******************
*   > XL Screen   *
******************/
/* Extra large devices (large laptops and desktops, 1200px and up) */
@define-mixin atXL {
  @media only screen and (min-width: $screen_xl) {
    @mixin-content;
  }
}

/************************
*   > Squished Screen   *
************************/
/* A device that is longer than a portable device, but with a small height
(e.g. squished browser window) */
@define-mixin atSquished {
  @media only screen and (max-height: $screen_squished_height) and (min-width: $screen_squished_width) {
    @mixin-content;
  }
}

/***********************
*   > Crushed Screen   *
***********************/
/* A device that is longer than a portable device, but with a very small height
(e.g. very squished browser window) */
@define-mixin atCrushed {
  @media only screen and (max-height: $screen_crushed_height) and (min-width: $screen_crushed_width) {
    @mixin-content;
  }
}

/***********************
*   > Pancake Screen   *
***********************/
/* A device that is longer than a portable device,
but with about as little height as you can get
(e.g. very, very squished browser window) */
@define-mixin atPancake {
  @media only screen and (max-height: $screen_pancake_height) and (min-width: $screen_pancake_width) {
    @mixin-content;
  }
}


/**************************************/
/*   # Clear Fix                     */
/************************************/

@define-mixin clearFix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}

/**************************************/
/*   # Text Styles                   */
/************************************/

@define-mixin shadowBold $color {
  text-shadow: 0 0 1px rgba($color, 1);
}

/**************************************/
/*   # List Styles                   */
/************************************/

/*********************
*   > Edge Bullets   *
*********************/
/*
Center the bullets over the edge of the wrapper.
Accuracy may very based on any additional styles applied to the ul or li children.
Style requires li children and the use of the li children's before*/
@define-mixin edgeBullets $bHeight: 12px, $bWidth: 12px, $topShift: 0{
  /*list style*/
  list-style: none;
  /*spacing -- remove ul default left spacing*/
  margin-block-start: 0;
  padding-inline-start: 0;

  & > li {
    /*position*/
    position: relative;
    /*THE BULLET*/
    &::before {
      content: "";
      /*display*/
      display: block;
      /*position*/
      position: absolute;
      top: calc($bHeight / 2 - $topShift);
      left: calc((17px + $bWidth/2) * -1);
      /*structure*/
      height: $bHeight;
      width: $bWidth;
      /*borders*/
      border-radius: 50%;
      /*colors*/
      background-color: $color_a;
    }
  }
}

/********************
*   > Eye Bullets   *
********************/
/*
Create a larger bullet with outer circle outline and an inner blue circle.
Accuracy may very based on any additional styles applied t othe ul or li children.
Style requires li children and the use of the li children's before and after
bSize: Size of bullet
leftShift: Amount to shift the bullet horizontally (positive value moves left)
topShift: Amount to shift the bullet vertically (positive value moves up)
*/

@define-mixin eyeBullets $bSize: 36px, $leftShift: 0px, $topShift: 0px{
  /*list style*/
  list-style: none;
  /*spacing -- remove ul default left spacing*/
  margin-block-start: 0;
  padding-inline-start: 0;

  /*Variables*/
  /* $eyeBullet_outerLeft: ($leftShift + $bSize/2) * -1;
  $eyeBullet_outerTop: $bSize / 2 - $topShift;
  $eyeBullet_outerBorderWidth: 2px; */

  $eyeBullet_outerLeft: (40px + $leftShift + $bSize/2) * -1;
  $eyeBullet_outerTop: $bSize / 2 - 23px - $topShift;
  $eyeBullet_outerBorderWidth: 2px;

  /*List Items*/
  & > li {

    /*position*/
    position: relative;
    /*THE BULLET*/
    &::before {
      content: "";
      /*display*/
      display: block;
      /*position*/
      position: absolute;
      top: calc($eyeBullet_outerTop);
      left: calc($eyeBullet_outerLeft);
      /*structure*/
      height: $bSize;
      width: $bSize;
      /*borders*/
      border-radius: 50%;
      border-style: solid;
      border-width: $eyeBullet_outerBorderWidth;
      /*colors*/
      background-color: rgb($color_white);
      border-color: $color_a;

    }

    &::after {
      $eyeBullet_gapSize: 6px;
      content: "";
      /*display*/
      display: block;
      /*position*/
      position: absolute;
      top: calc(($eyeBullet_outerTop) + ($eyeBullet_gapSize) + ($eyeBullet_outerBorderWidth));
      left: calc(($eyeBullet_outerLeft) + ($eyeBullet_gapSize) + ($eyeBullet_outerBorderWidth));
      /*structure*/
      height: calc($bSize - 2 * $eyeBullet_gapSize);
      width: calc($bSize - 2 * $eyeBullet_gapSize);
      /*borders*/
      border-radius: 50%;
      /*colors*/
      background-color: $color_c;
    }
  }

}

/**************************************/
/*   # Wrapper Styles                */
/************************************/


/*
  POPOUT
  Create a popout effect.

  Requires:
  - the element has a position
  - the use the element's after.
*/
@define-mixin popout $afterColor: $color_a, $shiftAmount: 4px, $borderRadius: 0 {
  /*spacing*/
  padding-left: 1rem;
  padding-right: 1rem;
  padding-top: 5px;
  padding-bottom: 5px;
  margin-bottom: 1rem;
  margin-right: 1rem;

  /*borders*/
  border-radius: $borderRadius;
  border-style: solid;
  border-width: 2px;
  /*colors*/
  border-color: rgb($color_darkBlue);
  color: rgb($color_darkBlue);
  background-color: white;

  &::after {
    content: "";
    /*display*/
    display: block;
    /*position*/
    position: absolute;
    top: $shiftAmount;
    left: $shiftAmount;
    z-index: -1;
    /*structure*/
    width: 100%;
    height: 100%;
    /*borders*/
    border-style: solid;
    border-width: 2px;
    border-radius: $borderRadius;
    /*colors*/
    background-color: $afterColor;
    border-color: rgb($color_darkBlue);

  }
}
